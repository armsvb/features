[SUBROUTINE]
icon = icons/rect-array.png
name = Compensation map
image = images/rect-array.png
type = Compensation map
help = 	Creates rect probe map in filename.txt
		W H X0 Y0 Step FastZ
		Need global params: 
			_global_rappid 
			_global_probe_feed 
			_global_latch 
			_global_latch_feed 
			_global_tool_probe_z 
order = pr01 pr02 pr03 pr04 pr05 pr06 pr07

[PARAM_PR01]
name = X0
type = float
icon = icons/rect-corner.png
tool_tip = X0
value = 0

[PARAM_PR02]
name = Y0
type = float
icon = icons/rect-corner.png
tool_tip = Y0
value = 0

[PARAM_PR03]
name = Width
type = float
icon = icons/width.png
tool_tip = Width
value = 20

[PARAM_PR04]
name = Height
type = float
icon = icons/height.png
tool_tip = Height
value = 10

[PARAM_PR05]
name = Angle
type = float
icon = icons/angle.png
tool_tip = angle for rotate scan rect around X0,Y0
value = 0

[PARAM_PR06]
name = Step
type = float
icon = icons/rect-array.png
tool_tip = grid scan
value = 5

[PARAM_PR07]
name = Fast Z
type = float
icon = icons/dz.png
tool_tip = Safe Z for fast moving
value = 0.2

[DEFINITIONS]
content = 
	<eval>self.include_once("rotate-xy.ngc")</eval>
	
	(compensation_map sub definition)
	
	O<compensation_map> SUB
		M65 P0		
		#<x0> = #1 (X left corner) 
		#<y0> = #2 (Y left corner)
		#<w> = #3 (X - width)
		#<h> = #4 (Y - height)
		#<a> = #5 (rotate angle)
		#<step> = #6 (grid scan)
		#<safe_fast_z> = #7 (lifting probe between steps)
		#<search_feed> = #<_global_probe_feed>
		#<latch_feed> = #<_global_latch_feed> (1, set to 0 to ignore latching, if GT 0 then latch forward, else - backward)
		#<safe_z> = #<_global_probe_rappid>
		#<search_z> = #<_global_probe_depth>
		
		#<probe_func> = #<_global_probe_func>	
		(Flip probe func ['38.2 - 38.4', '38.3 - 38.5', '38.4 - 38.2', '38.5 - 38.3'])
		#<probe_func_flip> = [[#<probe_func>*10-380] MOD 4 / 10 + 38.2]
		

		(PROBEOPEN filename.txt)
		
		O<rotate-xy> CALL [#<w>] [#<h>] [0] [0] [#<a>]
		#<w> = #<_rotate_result_x>
		#<h> = #<_rotate_result_y>
		O<rotate-xy> CALL [#<step>] [0] [0] [0] [#<a>]
		#<step_wx> = #<_rotate_result_x>
		#<step_wy> = #<_rotate_result_y>
		O<rotate-xy> CALL [0] [#<step>] [0] [0] [#<a>]
		#<step_hx> = #<_rotate_result_x>
		#<step_hy> = #<_rotate_result_y>
	
		G0 Z#<safe_z>
		#<x> = #<x0>
		#<y> = #<y0>
		O<comp-while-01> WHILE [#<y> LE #<h>+#<y0>]
		
			O<comp-while-02> WHILE [#<x> LE #<w>+#<x0>]
		
				G0 X[#<x>] Y[#<y>]
				F[#<search_feed>]
				G#<probe_func> Z[#<search_z>] (Search)
			
				O<comp-if-01> IF [#<latch_feed> GT 0] (Latch if needed)
					G0 Z[#5063+#<safe_fast_z>]
					F[#<latch_feed>]
					G#<probe_func> Z[#<search_z>]
				O<comp-if-01> ELSEIF [#<latch_feed> LT 0]
					F[-#<latch_feed>]
					G#<probe_func_flip> Z[#<safe_z>]
				O<comp-if-01> ENDIF
			
				G0 Z[#5063+#<safe_fast_z>]
				#<x> = [#<x>+#<step_wx>]
				#<y> = [#<y>+#<step_wy>]
		
			O<comp-while-02> ENDWHILE
			#<x> = [#<x>-#<step_wx>]
			#<y> = [#<y>-#<step_wy>]
		
			#<x> = [#<x>+#<step_hx>]
			#<y> = [#<y>+#<step_hy>]
			
			O<comp-if-04> IF [#<y> LE #<h>+#<y0>]
				O<comp-while-03> WHILE [#<x> GE #<x0>]
		
					G0 X[#<x>] Y[#<y>]
					F[#<search_feed>]
					G#<probe_func> Z[#<search_z>] (Search)
			
					O<comp-if-05> IF [#<latch_feed> GT 0] (Latch if needed)
						G0 Z[#5063+#<safe_fast_z>]
						F[#<latch_feed>]
						G#<probe_func> Z[#<search_z>]
					O<comp-if-05> ELSEIF [#<latch_feed> LT 0]
						F[-#<latch_feed>]
						G#<probe_func_flip> Z[#<safe_z>]
					O<comp-if-05> END IF
			
					G0 Z[#5063+#<safe_fast_z>]
					#<x> = [#<x>-#<step_wx>]
					#<y> = [#<y>-#<step_wy>]
		
				O<comp-while-03> ENDWHILE				
				#<x> = [#<x>+#<step_wx>]
				#<y> = [#<y>+#<step_wy>]
			O<comp-if-04> ENDIF
			
			#<x> = [#<x>+#<step_hx>]
			#<y> = [#<y>+#<step_hy>]
		
		O<comp-while-01> ENDWHILE
		G0 Z#<safe_z>
		(PROBECLOSE)
		
		M64 P1 
		G4 P1
		M65 P1
	
	O<compensation_map> ENDSUB



[CALL]
content = 
	( *********************************** )
	( compensation_map Call )

	#<x0> = [#param_pr01]
	#<y0> = [#param_pr02]
	#<w> = [#param_pr03]
	#<h> = [#param_pr04]
	#<a> = [#param_pr05]
	#<step> = [#param_pr06]
	#<safe_fast_z> = [#param_pr07]

	O<compensation_map> CALL [#<x0>] [#<y0>] [#<w>] [#<h>]  [#<a>]  [#<step>] [#<safe_fast_z>]
	
	( *********************************** )

[BEFORE]
content = 
	
[AFTER]
content = 
