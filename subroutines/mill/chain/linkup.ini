[SUBROUTINE]
icon = icons/array.png
name =  Chain
image = images/array.png
type = Chain
help = 	<big>Link up lines and arcs</big>		
		Drag and drop lines and arcs into Items parameter.
		X0 Y0 - Start point of chain
		close=0 not close contour, else - close
		X0 Y0 Parameters Depth DepthStep Rappid Surface FinalCut
		
order = 01 02 03 05 06 07 08 09 items
		
[PARAM_01]
name = X0
type = float
icon = icons/line-to.png
tool_tip = X0
value = 0

[PARAM_02]
name = Y0
type = float
icon = icons/line-to.png
tool_tip = Y0
value = 0

[PARAM_03]
name = close
type = float
icon = icons/close.png
tool_tip = Y0
value = 0

[PARAM_05]
name = Depth
type = float
icon = icons/height.png
tool_tip = Depth
value = #<_global_depth>

[PARAM_06]
name = Depth step
type = float
icon = icons/dz.png
tool_tip = Depth step per pass
value = #<_global_depth_step>

[PARAM_07]
name = Surface
type = float
icon = icons/dz.png
tool_tip = Surface height
value = #<_global_surface>

[PARAM_08]
name = Rappid
type = float
icon = icons/height.png
tool_tip = Rappid height
value = #<_global_rappid>

[PARAM_09]
name = Final cut
type = float
icon = icons/height.png
tool_tip = Rappid height
value = #<_global_final>


[PARAM_ITEMS]
name = Items
type = items
icon = icons/items.png
tool_tip = Drop Subroutines here


[DEFINITIONS]
content = 
	#<_line_ar> = <eval>self.get_unique_id()</eval> ; should be unique id	
	(Line_ar sub definition)
	
	O#<_line_ar> sub
		
		#<x0> = #1
		#<y0> = #2
		#<a> = #3    
		#<r> = #4
		G01 X[#<x0>] Y[#<y0>]
		G1 ^#<a> @#<r>

	     					
	O#<_line_ar> endsub

        #<_line_xy> = <eval>self.get_unique_id()</eval> ; should be unique id	
	
	(Line_xy sub definition)
	
	O#<_line_xy> sub
		
		#<x0> = #1    
		#<y0> = #2
		#<x1> = #3    
		#<y1> = #4
;		#<x> = [#<_x>]    
;		#<y> = [#<_y>]
		
   	        G01 X[#<x0>] Y[#<y0>]
   	        G01 X[#<x1>] Y[#<y1>]
	     					
	O#<_line_xy> endsub

 	(Arc xyr sub definition)
	#<_arc_xyr> = <eval>self.get_unique_id()</eval> ; should be unique id	
	O#<_arc_xyr> sub
		#<x0> = #1   
		#<y0> = #2
		#<x> = #3   
		#<y> = #4
		#<r>  = #5
		#<cw> = #6
 
   	        G01 X[#<x0>] Y[#<y0>]
		O<arc-if-01>IF [#<cw> GE 0]
			G2 X[#<x>] Y[#<y>] R[#<r>]
		O<arc-if-01>ELSE
			G3 X[#<x>] Y[#<y>] R[#<r>]			
		O<arc-if-01>ENDIF		
				
	O#<_arc_xyr> endsub


 	(Arc_xyc sub definition)
	#<_arc_xyc> = <eval>self.get_unique_id()</eval> ; should be unique id	
	O#<_arc_xyc> sub
		#<x0> = #1
		#<y0> = #2
		#<x> = #3   
		#<y> = #4
		#<cx> = #5
		#<cy> = #6
		#<cw> = #7 
   	        G01 X[#<x0>] Y[#<y0>]
		O<arc3-if-01>IF [#<cw> GE 0]
			G2 X[#<x>] Y[#<y>] I[#<cx>-#<x0>] J[#<cy>-#<y0>]
		O<arc3-if-01>ELSE
			G3 X[#<x>] Y[#<y>] I[#<cx>-#<x0>] J[#<cy>-#<y0>]			
		O<arc3-if-01>ENDIF		
				
	O#<_arc_xyc> endsub

 	(Arc_3points sub definition)
	#<_arc_3points> = <eval>self.get_unique_id()</eval> ; should be unique id	
	O#<_arc_3points> sub
		#<x0> = #1
		#<y0> = #2
		#<x1> = #3   
		#<y1> = #4
		#<x2> = #5
		#<y2> = #6
 
		(calculate cx cy)
		#<a> = [#<x1>-#<x0>]
		#<b> = [#<y1>-#<y0>]
		#<c> = [#<x2>-#<x0>]
		#<d> = [#<y2>-#<y0>]
		#<e> = [#<a>*[#<x0>+#<x1>]+#<b>*[#<y0>+#<y1>]]
		#<f> = [#<c>*[#<x0>+#<x2>]+#<d>*[#<y0>+#<y2>]]
		#<g> = [2*[#<a>*[#<y2>-#<y1>]-#<b>*[#<x2>-#<x1>]]]
		#<cx> = 0
		#<cy> = 0
		O<arc-if-04>IF [#<g> EQ 0]
			(DEBUG, Error: colinear points)
		O<arc-if-04>ELSE
			#<cx> = [[#<d>*#<e>-#<b>*#<f>]/#<g>]
			#<cy> = [[#<a>*#<f>-#<c>*#<e>]/#<g>]

		(calculate cw)
		#<cw> = 1
		O<arc-if-02>IF [[#<y2>-#<y0>]*[#<x1>-#<x0>] GT [#<y1>-#<y0>]*[#<x2>-#<x0>]]
			#<cw> = -1
		O<arc-if-02>ENDIF
		
		O<arc3-if-01>IF [#<cw> GE 0]
			G2 X[#<x2>] Y[#<y2>] I[#<cx>-#<x0>] J[#<cy>-#<y0>]
		O<arc3-if-01>ELSE
			G3 X[#<x2>] Y[#<y2>] I[#<cx>-#<x0>] J[#<cy>-#<y0>]			
		O<arc3-if-01>ENDIF		
				
	O#<_arc_3points> endsub

[CALL]
content = 

[BEFORE]
content =

	(Linked multipass WHILE definition)
		#<x0> = [#param_01]
		#<y0> = [#param_02]
		#<close> = [#param_03]		
		#<depth> = [#param_05]
		#<step> = [#param_06]
		#<surface> = [#param_07]
		#<rappid> = [#param_08]
		#<final> = [#param_09]		
		#<flag>	= 0	
	
		G0 Z#<rappid>
		G0 X#<x0> Y#<y0>
		#<z> = #<surface>
		O<linked-multipass-while> WHILE [#<z> GT [#<depth>]]
			(Make next step cut)
			#<z> = [#<z>-#<step>]
			O<linked-multipass-if01> IF [#<flag> EQ 0]				
				O<linked-multipass-if02> IF [#<z> LE [#<depth>+#<final>]]
					(Make pre final cut)
					#<z>=[#<depth>+#<final>]
					#<flag> = 1
				O<linked-multipass-if02> ENDIF 
			O<linked-multipass-if01> ELSE
				(Make final cut)
				#<z>=[#<depth>] 
			O<linked-multipass-if01> ENDIF 
			G1 Z#<z>	
		
			(all items will be auto plased there)

[AFTER]
content = 
			O<linked-multipass-if03> IF [#<close> EQ 0]
				(Not close contour)
				G0 Z#<rappid>
				G0 X[#param_01] Y[#param_02]
				O<linked-multipass-if04> IF [#<z> NE [#<depth>]]
					G0 Z#<z>
				O<linked-multipass-if04> ENDIF 
			O<linked-multipass-if03> ELSE
				G1 X#param_01 Y#param_02
			O<linked-multipass-if03> ENDIF 
		
		O<linked-multipass-while> ENDWHILE
		G0 Z#<rappid>	
	(Linked multipass WHILE definition end)

