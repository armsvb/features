[SUBROUTINE]
icon = icons/draw.png
name = Draw
image = images/draw.png
type = Draw
help = 	<big>Draw</big>
order = x y surface depth


[PARAM_X]
name = X
type = float
icon = 
tool_tip = X start
value = #<_x>

[PARAM_Y]
name = Y
type = float
icon = 
tool_tip = Y start
value = #<_y>

[PARAM_SURFACE]
name = Surface
type = float
icon = icons/surface.png
tool_tip = Surface
value = #<_global_surface>

[PARAM_DEPTH]
name = Depth
type = float
icon = icons/depth.png
tool_tip = Depth
value = #<_global_depth>

[PARAM_ITEMS]
name = Items
type = items
icon = icons/items.png
tool_tip = Drop Draw items here

[DEFINITIONS]
content = 
	( Draw definitions )
		;py,import os
		;py,import sys
		;py,()	
		;py,sys.path.append("<eval>os.path.dirname(__file__)</eval>/subroutines/mill/draw/")
		;py,from milldraw import *
		;py,milldraw = MillDraw()
		(Parse commands from external python script)
		O<milldraw-exec> SUB
			#<draw_param_g> = 1
			; // py,log("start draw")
			; Set parameters
			;py,milldraw.path.process.surface			= interpreter.this.params[1]
			;py,milldraw.path.process.depth				= interpreter.this.params[2]
			;py,milldraw.path.process.depth_step		= interpreter.this.params['_global_depth_step']
			;py,milldraw.path.process.rappid			= interpreter.this.params['_global_rappid']
			;py,milldraw.path.process.feed				= interpreter.this.params['_global_feed']
			;py,milldraw.path.process.penetration_feed	= interpreter.this.params['_global_penetration_feed']
			;py,milldraw.path.process.penetration_angle	= interpreter.this.params['_global_penetration_angle']/180*3.1415926535897931
			;py,milldraw.path.process.spindle			= interpreter.this.params['_global_spindle']
			;py,milldraw.path.process.final				= interpreter.this.params['_global_final']
			;py,milldraw.path.process.final_num			= interpreter.this.params['_global_final_num']
			;py,milldraw.path.process.final_feed		= interpreter.this.params['_global_final_feed']
			;py,milldraw.path.process.final_spindle		= interpreter.this.params['_global_final_spindle']
			; Process to get Gcode
			;py,milldraw.process()
			;py,interpreter.this.params['lines']=len(milldraw.exp)
			O<milldraw-exec-repeat> REPEAT [#<lines>]
				; Get Gcode in own format (gcode-type, x,y,z,i,j,k,feed)
				;py,g,x,y,z,i,j,k,f = milldraw.get_line()
				;  py,log(g,x,y,z,i,j,k,f)
				;py,interpreter.this.params['draw_param_g']=g
				;py,interpreter.this.params['draw_param_x']=float(x) if x != None else 0
				;py,interpreter.this.params['draw_param_y']=float(y) if y != None else 0
				;py,interpreter.this.params['draw_param_z']=float(z) if z != None else 0
				;py,interpreter.this.params['draw_param_i']=float(i) if i != None else 0
				;py,interpreter.this.params['draw_param_j']=float(j) if j != None else 0
				;py,interpreter.this.params['draw_param_k']=float(k) if k != None else 0
				;py,interpreter.this.params['draw_param_f']=float(f) if f != None else -1
				
				O<milldraw-exec-if-01> IF [#<draw_param_f> GT 0] 
					F#<draw_param_f>
				O<milldraw-exec-if-01> ENDIF

				O<milldraw-exec-if>     IF [ #<draw_param_g> EQ -100 ] ; Set Spindle
					S#<draw_param_x>
				O<milldraw-exec-if> ELSEIF [ #<draw_param_g> EQ 130 ] ; G1 XY move
					G01 X#<draw_param_x> Y#<draw_param_y>
				O<milldraw-exec-if> ELSEIF [ #<draw_param_g> EQ 140 ] ; G1 Z 					
					G01 Z#<draw_param_z>					
				O<milldraw-exec-if> ELSEIF [ #<draw_param_g> EQ 170 ] ; G1 XYZ
					G01 X#<draw_param_x> Y#<draw_param_y> Z#<draw_param_z>				
					
				O<milldraw-exec-if> ELSEIF [ #<draw_param_g> EQ  30 ] ; G0 XY
					G00 X#<draw_param_x> Y#<draw_param_y>
				O<milldraw-exec-if> ELSEIF [ #<draw_param_g> EQ  40 ] ; G0 Z 					
					G00 Z#<draw_param_z>					
				O<milldraw-exec-if> ELSEIF [ #<draw_param_g> EQ  70 ] ; G0 XYZ
					G00 X#<draw_param_x> Y#<draw_param_y> Z#<draw_param_z>				

				O<milldraw-exec-if> ELSEIF [ #<draw_param_g> EQ 2 OR #<draw_param_g> EQ 3 ] 
					G[#<draw_param_g>] X#<draw_param_x> Y#<draw_param_y> Z#<draw_param_z> I#<draw_param_i> J#<draw_param_j>  
				O<milldraw-exec-if> ENDIF 
				
			O<milldraw-exec-repeat> ENDREPEAT
			;py,log("end draw")
			;py;log()
		O<milldraw-exec> ENDSUB
		
	( /Draw definitions )

[BEFORE]
content = 
	#<draw_tmp_x> = [#param_x]
	#<draw_tmp_y> = [#param_y]
	#<_draw_start_x> = [#param_x]
	#<_draw_start_y> = [#param_y]
	;py,milldraw.draw_start(interpreter.this.params['draw_tmp_x'],interpreter.this.params['draw_tmp_y'])
	#<_draw_x> = [#param_x]
	#<_draw_y> = [#param_y]
	
[AFTER]
content = 

	O<milldraw-exec> CALL [[#param_surface]] [[#param_depth]]

[CALL]
content = 








