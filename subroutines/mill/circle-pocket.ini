[SUBROUTINE]
icon = icons/circle.png
name = Circular pocket
image = images/circle.png
type = Circular pocket
help = 	<big>Creates Circular pocket</big>
		Parameters: <i>CX CY InD OutD CW BEGIN Step INAV OUTAV</i>
order = cx cy ind outd cw begin step inav outav

[PARAM_CX]
name = CX
type = float
icon = icons/rect.png
tool_tip = CX
value = 0

[PARAM_CY]
name = CY
type = float
icon = icons/rect.png
tool_tip = CY
value = 0

[PARAM_IND]
name = InD
type = float
icon = icons/diameter.png
tool_tip = Inside diameter
value = 0

[PARAM_OUTD]
name = OutD
type = float
icon = icons/diameter.png
tool_tip = Outside diameter
value = 25

[PARAM_CW]
name = cw
type = float
icon = icons/arc-cw-ccw.png
tool_tip = cw=0 else ccw
value = 0

[PARAM_BEGIN]
name = begin
type = float
icon = icons/goto1.png
tool_tip = begin from in =0 else begin from out
value = 1

[PARAM_STEP]
name = Side step
type = float
icon = icons/dx.png
tool_tip = Side step
value = 1

[PARAM_INAV]
name = Inside Angle Vert
type = float
icon = icons/angle-vert.png
tool_tip = Inside Angle Vertical
value = 0

[PARAM_OUTAV]
name = Outside Angle Vert
type = float
icon = icons/angle-vert.png
tool_tip = Outside Angle Vertical
value = 0

[DEFINITIONS]
content = 
	(Multipass sub definition)
	O<multipass_circle> SUB
		#<sub> = #1
		#<x0> = #2
		#<y0> = #3		
		#<inr> = #4
		#<outr> = #5
		#<cw> = #6
		#<begin> = #7
		#<step-circle> = #8 
		#<inav> = #9
		#<outav> = #10
		#<depth> = [#<_global_depth>]
		#<step> = [#<_global_depth_step>] 
		#<surface> = [#<_global_surface>]
		#<rappid> = [#<_global_rappid>]
		#<final> = [#<_global_final>]		

		F#<_global_feed> S#<_global_spindle>
		G0 Z#<rappid>
		G0 X#<x0> Y#<y0>
		#<delta> = 0		
		#<z> = #<surface>
		O<multipass-while> WHILE [#<z> GT [#<depth>+#<final>]]
			#<delta>=#<step>
			O<multipass-if> IF [[#<z>-#<step>] LT [#<depth>+#<final>]]
				#<delta>=[#<z>-#<depth>+#<final>]
			O<multipass-if> ENDIF 
			#<z> = [#<z>-#<delta>]
			G1 X#<x0> Y#<y0> Z#<z> F#<_global_penetration_feed>
			F#<_global_feed> 
			(call pass sub with the restof parameters)
			#<sub> = #1
			O#1 CALL [#<x0>] [#<y0>] [#<inr>] [#<outr>] [#<step-circle>] [#<outav>] [#<cw>] [#<begin>]
			O<multipass-if02> IF [#<z> GT [#<depth>+#<final>]] 
				#<x0> = [#<x0>-#<delta>*TAN[#<inav>]]
				#<inr> = [#<inr>-#<delta>*TAN[#<inav>]]
				#<outr> = [#<outr>-#<delta>*TAN[#<outav>]]
			O<multipass-if02> ELSE
				#<x0> = [#<x0>-#<final>*TAN[#<inav>]]
				#<inr> = [#<inr>-#<final>*TAN[#<inav>]]
				#<outr> = [#<outr>-#<final>*TAN[#<outav>]]
			O<multipass-if02> ENDIF 
			O<multipass-if04> IF [#<inr> LT 0]
				#<final>=0
				O<multipass-while> BREAK
			O<multipass-if04> ENDIF 
		
		O<multipass-while> ENDWHILE
		
		(Make final cut)
		O<multipass-if03> IF [#<final> GT 0]
			G1 X#<x0> Y#<y0> Z#<depth> F#<_global_penetration_feed>
			F#<_global_final_feed> S#<_global_final_spindle>
			O#1 CALL [#<x0>] [#<y0>] [#<inr>] [#<outr>] [#<step-circle>] [#<outav>] [#<cw>] [#<begin>]
		O<multipass-if03> ENDIF 

		G0 Z#<rappid>	
	O<multipass_circle> ENDSUB
	
	(Circle sub definition)
	#<_circle-sub> = <eval>self.get_unique_id()</eval> ; should be unique id	
	O#<_circle-sub> sub		
		#<x0> = #1    
		#<y0> = #2
		#<cx> = [#1-#3]    
		#<cy> = #2
		#<inr>  = #3
		#<outr>  = #4
		#<step-circle> = #5 
		#<outav> = #6
		#<cw> = #7
		#<begin> = #8
		O<circle-sub-while> WHILE [#<inr> LT #<outr>]
		 O<circle-sub-if04> IF [#<begin> EQ 0]
			G1 X[#<cx>+#<inr>] Y#<cy>
			O<circle-sub-if02> IF [#<cw> EQ 0]
				G2 X[#<cx>+#<inr>] Y#<cy> I[-#<inr>]
			O<circle-sub-if02> ELSE
				G3 X[#<cx>+#<inr>] Y#<cy> I[-#<inr>]
			O<circle-sub-if02> ENDIF
			#<inr> = [#<inr> + #<step-circle>]
			O<circle-sub-if> IF [#<inr> GE #<outr>]
				G1 X[#<cx>+#<outr>] Y#<cy>
				O<circle-sub-if03> IF [#<cw> EQ 0]
				 G2 X[#<cx>+#<outr>] Y#<cy> I[-#<outr>]
				O<circle-sub-if03> ELSE
				 G3 X[#<cx>+#<outr>] Y#<cy> I[-#<outr>]
				O<circle-sub-if03> ENDIF
			O<circle-sub-if> ENDIF
		 O<circle-sub-if04> ELSE
			G1 X[#<cx>+#<outr>] Y#<cy>
			O<circle-sub-if05> IF [#<cw> EQ 0]
				G2 X[#<cx>+#<outr>] Y#<cy> I[-#<outr>]
			O<circle-sub-if05> ELSE
				G3 X[#<cx>+#<outr>] Y#<cy> I[-#<outr>]
			O<circle-sub-if05> ENDIF
			#<outr> = [#<outr> - #<step-circle>]
			O<circle-sub-if06> IF [#<inr> GE #<outr>]
				G1 X[#<cx>+#<inr>] Y#<cy>
				O<circle-sub-if07> IF [#<cw> EQ 0]
				 G2 X[#<cx>+#<inr>] Y#<cy> I[-#<inr>]
				O<circle-sub-if07> ELSE
				 G3 X[#<cx>+#<inr>] Y#<cy> I[-#<inr>]
				O<circle-sub-if07> ENDIF
			O<circle-sub-if06> ENDIF

		 O<circle-sub-if04> ENDIF
		O<circle-sub-while> ENDWHILE		
	O#<_circle-sub> endsub
	

[CALL]
content = 
	(Call circle sub cx cy r depth rappid)
	#<inr> = [0.5*#param_ind]
	#<inr> = [#<inr> + 0.5*#<_global_tool_d>]
	#<outr> = [0.5*#param_outd]
	#<outr> = [#<outr> - 0.5*#<_global_tool_d>]
	#<x0> = [#param_cx+#<inr>]
	#<y0> = [#param_cy]
	#<cw> = [#param_cw]	
	#<begin> = [#param_begin]	
	#<inav> = [#param_inav]
	#<outav> = [#param_outav]
	#<step-circle> = [#param_step]
	O<multipass_circle> CALL [#<_circle-sub>] [#<x0>] [#<y0>] [#<inr>] [#<outr>] [#<cw>] [#<begin>] [#<step-circle>] [#<inav>] [#<outav>]
	
[BEFORE]
content = 
	
[AFTER]
content = 
