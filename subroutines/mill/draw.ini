[SUBROUTINE]
icon = icons/draw.png
name = Draw
image = images/draw.png
type = Draw
help = 	<big>Draw</big>
order = x y

[PARAM_X]
name = X
type = float
icon = 
tool_tip = X start
value = #<_x>

[PARAM_X]
name = Y
type = float
icon = 
tool_tip = Y start
value = #<_y>

[DEFINITIONS]
content = 
	O<draw-multipass> SUB
		(Sets #<_draw_z> to next depth step)
		(Uses #<_z> and global cutting parameters)
		O<draw-multipass-if> IF [#<_z> GT [#<_global_depth>+#<_global_final>*#<_global_final_num>]]
			#<_draw_z> = [#<_z> - #<_global_depth_step>]
			O<draw-multipass-if-01> IF [#<_draw_z> GT [#<_global_depth>+#<_global_final>*#<_global_final_num>]]
				#<draw_z> = [#<_global_depth>+#<_global_final>*#<_global_final_num>]
			O<draw-multipass-if-01> ENDIF 
		O<draw-multipass-if> ELSE 
			#<_draw_z> = [#<_z> - #<_global_final>]
		O<draw-multipass-if> ENDIF
		O<draw-multipass-if-02> IF [#<_draw_z> LH #<global_depth>]
			#<_draw_z> = #<global_depth>
		O<draw-multipass-if-02> ENDIF
	O<draw-multipass> ENDSUB


[BEFORE]
content = 
	(Draw stages: )
	(	1 - Get lenght and end point )
	(	2 - Start cut, i.e. go to surface depth )
	#<draw_stage> = 1
	#<l> = 0
	#<pl> = 0

	O<draw-while> WHILE [#<_z> GT #<_global_depth>]
		O<draw-while-if-01> IF [#<draw_stage> EQ 2]
			G0 X[#<draw_x_start>] Y[#<draw_y_start]
			G0 Z[#<_global_surface>]
		O<draw-while-if-01> ENDIF
	

	
[AFTER]
content = 
	O<draw-while> ENDWHILE

	(Return to rappid distance)
	G0 Z#<_global_rappid>

[CALL]
content = 










	(Add line)
	O<line-to> SUB
		O<goto> CALL [#1] [#2] [1]
	O<line-to> ENDSUB


	(Add line or goto)
	O<goto> SUB
		#<x> =  #1
		#<y> =  #2
		#<gcode> = #3
		(Save angle at the end of movement)
		O<alpha-at-move-end> CALL [1] [#1] [#2]
	
		O<goto-if> IF [#<_plane> EQ 170] (XY)
			G#<gcode> X#<x> Y#<y> 
		O<goto-if> ELSEIF [#<_plane> EQ 180] (XZ)
			G#<gcode> X#<x> Z#<y>
		O<goto-if> ELSEIF [#<_plane> EQ 190] (YZ)
			G#<gcode> Y#<x> Z#<y>
		O<goto-if> ENDIF
	O<goto> ENDSUB


	(Add arc sub)
	(G x y i j)
	O<arc-to> SUB
		#<gcode> = #1
		#<x> =  #2
		#<y> =  #3
		#<i> =  #4
		#<j> =  #5
		(Save angle at the end of movement)
		O<alpha-at-move-end> CALL [#1] [#2] [#3] [#4] [#5]
		O<arc-to-if> IF     [#<_plane> EQ 170] (XY)
			G#<gcode> X#<x> Y#<y> I#<i> J#<j> 
		O<arc-to-if> ELSEIF [#<_plane> EQ 180] (XZ)
			G#<gcode> X#<x> Z#<y> I#<i> K#<j> 
		O<arc-to-if> ELSEIF [#<_plane> EQ 190] (YZ)
			G#<gcode> Y#<x> Z#<y> J#<i> K#<j> 
		O<arc-to-if> ENDIF
	O<arc-to> ENDSUB


	(get curent XY in current plane defined by G17-19)
	O<get-local-xy> SUB 
		(G17 - pass)
		O<get-local> CALL
		O<get-local-xy-if> IF     [#<_plane> EQ 180] (XZ)
			#<_yl> = #<_zl>
		O<get-local-xy-if> ELSEIF [#<_plane> EQ 190] (YZ)
			#<_xl> = #<_yl> 
			#<_yl> = #<_zl>
		O<get-local-xy-if> ENDIF
	O<get-local-xy> ENDSUB 
	
	(Add arc to x,y with r)
	O<arc-to-xyr> SUB
		#<gcode> = #1
		#<x> =  #2
		#<y> =  #3
		#<r> =  #4
		(Get center)
		O<get-local-xy> CALL
		#<x1> = [[#<x>-#<_xl>]/2]
		#<y1> = [[#<y>-#<_yl>]/2]

		#<l> = [#<r>*#<r> - #<x1>**2 - #<y1>**2]
		#<l1> = [#<x1>**2 + #<y1>**2]
	
		O<arc-to-xyr-paranoid> IF [ [#<l> GE 0 AND #<l1> GT 0]   OR   #<_paranoid> EQ 0 ] (If we are paranoid Will raise an error while preview if we can not add arc)
					#<l> = [ SQRT[#<l>]/SQRT[#<l1>] ]
					#<g3mult> = -[#<gcode>*2-5] (-1 for G02, 1 for G3)
				#<abs> = 	[#<_ijk_absolute_mode>] (=0 if i and j are absolute)		
				#<i> = [-#<y1>*#<l>*#<g3mult>]
				#<j> = [+#<x1>*#<l>*#<g3mult>]
				O<arc-to> CALL [#<gcode>] [#<x>] [#<y>] [#<x1>-#<y1>*#<l>*#<g3mult>+#<abs>*#<_xl>] [#<y1>+#<x1>*#<l>*#<g3mult>	+#<abs>*#<_yl>]
		O<arc-to-xyr-paranoid> ELSE (We are not paranoid)
				O<line-to> CALL [#<x>] [#<y>]
		O<arc-to-xyr-paranoid> ENDIF
	O<arc-to-xyr> ENDSUB


	(This sub uses get-offsets.ngc, do not forget to include <eval>self.include_once["get-offsets.ngc"]</eval>)
	(get alpha at the end of next move)
	#<_global_alpha-at-move-end> =  0
	O<alpha-at-move-end> SUB
		#<gcode> = #1
		#<x> = #2
		#<y> = #3
		#<i> = #4
		#<j> = #5
		#<r> = #6

		(Get local coordinates in plane)
		O<get-local-xy> CALL
		
		(Now get alpha)
		O<alpha-at-move-end-if-02> IF     [#<gcode> EQ 1] 
			#<_global_alpha-at-move-end> =  ATAN[#<x>-#<_xl>]/[#<y>-#<_yl>]
		O<alpha-at-move-end-if-02> ELSEIF [#<gcode> EQ 1]
			#<g3mult> = [#<gcode>*2-5] (-1 for G02, 1 for G3)
			#<abs> =	[1-#<_ijk_absolute_mode>] (=0 if i and j are absolute)
			#<_global_alpha-at-move-end> =  ATAN[[#<y>-#<_yl>*#<abs>-#<j>]*#<g3mult>]/[#<x>-#<_yl>*#<abs>-#<i>]
		O<alpha-at-move-end-if-02> ENDIF
		
	O<alpha-at-move-end> ENDSUB



	(Add arc tangent to 2 angles with R)
	(x,y,r,a,a)
	O<arc-to-raa> SUB
		#<gcode> = #1
		#<r> =  #2
		#<a> =  #3
		#<a1> = #4

		O<get-local-xy> CALL (get current local position)

		O<arc-to-raa-if-01> IF [#<gcode> EQ 3]
			#<i> = [ COS[#<a>]*#<r>]
			#<j> = [-SIN[#<a>]*#<r>]
			#<x1> = [ #<_xl>+#<i> - COS[#<a1>]*#<r> ]
			#<y1> = [ #<_yl>+#<j> + SIN[#<a1>]*#<r> ]
		O<arc-to-raa-if-01> ELSE
			#<i> = [-COS[#<a>]*#<r>]
			#<j> = [ SIN[#<a>]*#<r>]
			#<x1> = [ #<_xl>+#<i> + COS[#<a1>]*#<r> ]
			#<y1> = [ #<_yl>+#<j> - SIN[#<a1>]*#<r> ]
		O<arc-to-raa-if-01> ENDIF
	
		;O<goto> CALL [#<i>] [#<j>]
		;O<goto> CALL [#<x1>] [#<y1>]
		;O<goto> CALL [#<x0>] [#<y0>]
		;O<goto> CALL [#<_xl>] [#<_zl>]
	
		O<arc-to> CALL [#<gcode>] [#<x1>] [#<y1>] [#<i>] [#<j>]
	
	O<arc-to-raa> ENDSUB



