[SUBROUTINE]
icon = icons/circular-array.png
name = Circular array
image = images/circular-array.png
type = Circular array
help = 	<big>Create array of items</big>
		Drag and drop subroutines into Items parameter.
		Parameters num, dX, dY, dZ
		Modifies defined coordinate system to make offsets! Returns to G54 afterwards!
order = num cx cy d ang fill_angle coord rotate items
		

[PARAM_NUM]
name = Number
type = int
icon = icons/rect.png
tool_tip = Number of copies
value = 6

[PARAM_CX]
name = cX
type = float
icon = icons/center.png
tool_tip = X of array center
value = 0

[PARAM_CY]
name = cY
type = float
icon = icons/center.png
tool_tip = Y of array center
value = 0

[PARAM_D]
name = D
type = float
icon = icons/diameter.png
tool_tip = Array diameter
value = 100

[PARAM_ANG]
name = Start angle
type = float
icon = icons/angle.png
tool_tip = Angle for the first array item (0 points to X positive direction)
value = 0

[PARAM_FILL_ANGLE]
name = Fill angle
type = float
icon = icons/angle.png
tool_tip = Angle to fill with array
value = 360

[PARAM_COORD]
name = Coordinate system G
type = string
tool_tip = Use this coordinate system
value = 57

[PARAM_ROTATE]
name = Rotate items
type = bool
tool_tip = Rotate each item (1=Rotate, 0=No)
value = 1

[PARAM_ITEMS]
name = Items
type = items
icon = icons/items.png
tool_tip = Drop Subroutines here


[DEFINITIONS]
content = 

[CALL]
content = 

[BEFORE]
content = 
	(Circular Array - #self_id)
		<eval>self.include_once("rotate-xy.ngc")</eval>
		<eval>self.include_once("get-offsets.ngc")</eval>
	
		(Get cx,cy in machine coordinates)
		O<get-offsets> CALL 
		#<#self_id-cx> = [#<_get_offsets_x> + #param_cx]
		#<#self_id-cy> = [#<_get_offsets_y> + #param_cy]
		#<#self_id-r0> = #<_get_offsets_r>
		#<#self_id-r> = #<_get_offsets_r>
		#<#self_id-restore-coord> = #5220
		(Circular Array)
		#<#self_id-ang> = [#param_ang+#<_get_offsets_r>]
		G[#param_coord]
		; full id of feature is used to make able array of array's
		O<#self_id> REPEAT [#param_num]
			G92.1 (disable G92 offsets - they ruin the array after rotating coordinates) 
			(move and rotate coordinates)
			
			(Get rotated coordinates)
			O<rotate-xy> CALL [#<#self_id-cx>+#param_d/2] [#<#self_id-cy>] [#<#self_id-cx>] [#<#self_id-cy>] [#<#self_id-ang>]
			#<#self_id-x> = #<_rotate_result_x>
			#<#self_id-y> = #<_rotate_result_y>
		
			O<coordinate-sys-to-num> CALL [#param_coord]
			#<coord> = #<_coordinate-to-num>
			O<#self_id-if> IF [#param_rotate] (Enable rotations)
				G10 L2 P[#<coord>]  X#<#self_id-x> Y#<#self_id-y>  R#<#self_id-ang> 
			O<<eval>self.get_attr("id")</eval>-if> ELSE 
				G10 L2 P[#<coord>]  X#<#self_id-x> Y#<#self_id-y>  R#<#self_id-r> 
			O<<eval>self.get_attr("id")</eval>-if> ENDIF 

			; array body
		
[AFTER]
content = 
		; angle increment
			#<#self_id-ang>  = [#<#self_id-ang> + #param_fill_angle/#param_num]
		O<#self_id> END REPEAT
		; restore coordinate system to it's origin
		G10 L2 P[#<coord>]  X#<#self_id-cx> Y#<#self_id-cy>  R[#<#self_id-r0>]
		O<coordinate-sys-from-num>	CALL [#<#self_id-restore-coord>]
		G[#<_coordinate-from-num>]
	(End Circular Array - #self_id)	
